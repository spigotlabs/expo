{"version":3,"file":"BarCodeScanner.js","sourceRoot":"","sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\r\nimport mapValues from 'lodash.mapvalues';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Platform, ViewProps, ViewPropTypes } from 'react-native';\r\n\r\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\r\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\r\n\r\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\r\n\r\nconst EVENT_THROTTLE_MS = 500;\r\n\r\ntype BarCodeEvent = {\r\n  type: string;\r\n  data: string;\r\n  [key: string]: any;\r\n};\r\n\r\nexport type BarCodeEventCallbackArguments = {\r\n  nativeEvent: BarCodeEvent;\r\n};\r\n\r\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\r\n\r\nexport interface BarCodeScannerProps extends ViewProps {\r\n  type?: 'front' | 'back' | number;\r\n  barCodeTypes?: string[];\r\n  onBarCodeScanned: BarCodeScannedCallback;\r\n  zoom?: number;\r\n}\r\n\r\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\r\n  lastEvents: { [key: string]: any } = {};\r\n  lastEventsTimes: { [key: string]: any } = {};\r\n\r\n  static Constants = {\r\n    BarCodeType,\r\n    Type,\r\n  };\r\n\r\n  static ConversionTables = {\r\n    type: Type,\r\n  };\r\n\r\n  static propTypes = {\r\n    ...ViewPropTypes,\r\n    onBarCodeScanned: PropTypes.func,\r\n    barCodeTypes: PropTypes.array,\r\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    zoom: PropTypes.number,\r\n  };\r\n\r\n  static defaultProps = {\r\n    type: Type.back,\r\n    barCodeTypes: Object.values(BarCodeType),\r\n    zoom: 0,\r\n  };\r\n\r\n  static async scanFromURLAsync(\r\n    url: string,\r\n    barCodeTypes: string[] = Object.values(BarCodeType)\r\n  ): Promise<{ type: string; data: string }> {\r\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\r\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\r\n    }\r\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\r\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\r\n    }\r\n\r\n    if (Platform.OS === 'ios') {\r\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\r\n        // Only QR type is supported on iOS, fail if one tries to use other types\r\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\r\n      }\r\n      // on iOS use only supported QR type\r\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\r\n    }\r\n\r\n    // On other platforms, if barCodeTypes is not provided, use all available types\r\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\r\n  }\r\n\r\n  render() {\r\n    const nativeProps = this.convertNativeProps(this.props);\r\n    const { onBarCodeScanned } = this.props;\r\n    return (\r\n      <ExpoBarCodeScannerView\r\n        {...nativeProps}\r\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\r\n      />\r\n    );\r\n  }\r\n\r\n  // coordinates of cornerPoints and boundingBox are represented in DP (Display-Indepent Points) unit\r\n  // React Native is using the same unit\r\n  onObjectDetected = (callback?: BarCodeScannedCallback) => ({\r\n    nativeEvent,\r\n  }: BarCodeEventCallbackArguments) => {\r\n    const { type } = nativeEvent;\r\n    if (\r\n      this.lastEvents[type] &&\r\n      this.lastEventsTimes[type] &&\r\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\r\n      Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (callback) {\r\n      callback(nativeEvent);\r\n      this.lastEventsTimes[type] = new Date();\r\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\r\n    }\r\n  };\r\n\r\n  convertNativeProps(props: BarCodeScannerProps) {\r\n    const newProps = mapValues(props, this.convertProp);\r\n    return newProps;\r\n  }\r\n\r\n  convertProp(value: any, key: string): any {\r\n    if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\r\n      return BarCodeScanner.ConversionTables[key][value];\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nexport const { Constants } = BarCodeScanner;\r\n"]}